/*!
 * Material Grid List v1.0
 * Author Ephenodrom
 * Licensed under MIT
 */
(function($) {

    var settings;
    var cells = [];

    // Functions
    var methods = {
        // Define the render function
        render: function($elem, cells, columns) {
            // Print the cells
            var i = 1;
            var x = columns;
            $elem.removeClass(function(index, className) {
                return (className.match(/(^|\s)grid-list-\S+/g) || []).join(' ');
            });
            $elem.addClass("grid-list-" + x);
            var rank = 1;
            do {
                // Grab x elements from the array
                var begin = 0 + ((i - 1) * x);
                var end = i * x;
                var ar = cells.slice(begin, end);
                var modulo = i % 2;
		if($elem.data("sorting") == "monodirectional"){
		    modulo = 1;
		}
                if (modulo != 0) {
                    // Every uneven row we print from left to right
                    ar.forEach(function(entry) {
                        entry.removeClass(function(index, className) {
                            return (className.match(/(^|\s)cell-push\S+/g) || []).join(' ');
                        });
                        entry.removeClass(function(index, className) {
                            return (className.match(/(^|\s)cell-1\S+/g) || []).join(' ');
                        });
                        entry.data("grid-rank", rank);
                        rank++;
                        $elem.append(entry);
                    });
                } else {
                    // Every even row we print from right to left
                    ar.forEach(function(entry) {
                        entry.data("grid-rank", rank);
                        rank++;
                    });
                    ar.reverse();
                    ar.forEach(function(entry) {
                        entry.removeClass(function(index, className) {
                            return (className.match(/(^|\s)cell-push\S+/g) || []).join(' ');
                        });
                        entry.removeClass(function(index, className) {
                            return (className.match(/(^|\s)cell-1\S+/g) || []).join(' ');
                        });
                        if (ar.length < x) {
                            // Cell count in the row is shorter than max cells in row, so we push it
                            var y = x - ar.length;
                            entry.addClass("cell-push-" + y + "-" + x);
                        }
                        $elem.append(entry);
                    });
                }
                if (i * x > cells.length) {
                    break;
                }
                i++;
            } while (true);
        },
        update: function($elem, columns) {
            // Collect each cell
            cells = [];
            $elem.children('.grid-cell').each(function() {
                cells.push($(this));
            });
            // Sort the cells
	    cells.sort(methods.sort);
            // Delete all current cells
            $elem.empty();
            // Render the cells
            methods.render($elem, cells, columns);
        },
        sort: function(a,b) {
	    var one = parseInt(a.data("grid-rank"));
            var two = parseInt(b.data("grid-rank"));
	    return one-two;
        },
        checkWidth: function() {
            var $elem = $(".grid-list");
            var currentWidth = parseFloat($elem.css('width'));
            var columns = $elem.data("columns");
	    var maxColumns = $elem.data("max-columns");
            var newColumns = (currentWidth - 1) / 163 | 0;
	    if(newColumns > maxColumns){
		newColumns = maxColumns;
	    }
            if (newColumns != columns && columns < 6) {
                if (!(newColumns > 6 && columns == 5)) {
                    if (newColumns > 5) {
                        newColumns = 5;
                    }
                    // The row get smaller or bigger, so we have to reorder the list
                    methods.update($elem, newColumns);
                    $elem.data("columns", newColumns);
                }
            }
            setTimeout(methods.checkWidth, 500);
        },

    };

    // Plugin definition.
    $.fn.materialGrid = function(options) {

        return this.each(function() {

            // Default options
            settings = $.extend(true, {
                debug: true,
                maxcolumns: 5,
                sorting: "bidirectional",
            }, options);

            if (settings.debug == true) {
                console.log("Materialize Grid List Activated");
            }
            var $elem = $(this);
            // Collect each cell
            $elem.children('.grid-cell').each(function() {
                cells.push($(this));
            });
            $elem.empty();
            $elem.data("columns", settings.maxcolumns);
            $elem.data("max-columns", settings.maxcolumns);
	    $elem.data("sorting", settings.sorting);
            methods.render($elem, cells, settings.maxcolumns);
            methods.checkWidth();
        });
    };
}(jQuery));
